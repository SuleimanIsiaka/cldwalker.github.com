require 'erb'
require 'fileutils'

class Jekyll < Thor

  #define global options
  method_options :local=>:boolean, :verbose=>:boolean
  def initialize(*args)
    super
  end
  
  desc "tag_pages TAG1 TAG2 ...", "Creates tag pages- defaults to all tags"
  def tag_pages(*tags)
    tags = all_tags if tags.empty?
    tags.each {|e|
      create_tag_page(e, 'tag/tag.html')
    }
  end
  
  desc "tag_xml_pages TAG1 TAG2 ...", "Creates tag xml pages"
  def tag_xml_pages(*tags)
    tags.each {|e|
      create_tag_page(e, 'tag/tag.xml')
    }
  end
  
  def create_tag_page(tag, template_file)
    output_file = template_file.sub("/tag", "/#{tag}")
    result = create_page_string(template_file, :tag=>tag)
    create_output_file(output_file, result)
  end
  
  desc "tag_counts", "Print post counts per tag"
  def tag_counts
    tag_count.each do |tag,count|
      puts "#{tag}: #{count}"
    end
  end
  
  desc "new_post TITLE IS MULTIPLE WORDS", "New jekyll blog post"
  method_options :editor=>:boolean
  def new_post(*args)
    template_file = '_posts/new_post.textile'
    basename = Date.today.to_s + "-#{args.join('-')}"
    output_file = template_file.sub('new_post', basename)
    
    title = args.map {|e| e.capitalize}.join(' ')
    result = create_page_string(template_file, :title=>title)
    output_file = create_output_file(output_file, result)
    system(ENV['EDITOR'], output_file) if options['editor']
  end

  def create_output_file(relative_file, output, local=false)
    destination_dir = options['local'] ? '_site' : root_dir
    FileUtils.mkdir_p(destination_dir)
    destination_file = File.join(destination_dir, relative_file)
    FileUtils.mkdir_p File.dirname(destination_file)
    puts "Created file: #{destination_file}" if options['verbose']
    File.open(destination_file, 'w') {|f| f.write(output) }
    destination_file
  end
  
  def create_page_string(file, variables)
    variables.each {|k,v| instance_variable_set("@#{k}", v) }
    translated_string = ::ERB.new(File.read(file)).result(binding)
  end

  def all_tags
    tag_count.keys
  end

  def root_dir
    File.expand_path(File.join(File.dirname(__FILE__), '..'))
  end

  def posts_dir
   File.join(root_dir, '_posts')
  end

  #Returns all posts under _posts
  def posts
    Dir["#{posts_dir}/**"].select {|e| e !~ /~$/ }
  end

  #array of posts with their tags
  def post_tags
    posts.map do |e|
      yaml = YAML::load_file(e)
      [e, yaml['tags']]
    end
  end

  #array of tags with their counts
  def tag_count
    count = {}
    post_tags.each do |post, tags|
      tags.each do |t|
        count[t] ||= 0
        count[t] += 1
      end
    end
    count
  end

  # Use this method to print the output of any methods returning data structures
  def print_method(method)
    p send(method)
  end
end
