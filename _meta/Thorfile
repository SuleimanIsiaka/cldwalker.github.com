require 'erb'
require 'fileutils'

class Jekyll < Thor
  desc "tag_pages", "Creates tag pages"
  method_options :tags=>:optional, :local=>:boolean, :xml_only=>:boolean, :html_only=>:boolean
  def tag_pages
    tags = options['tags'] || all_tags
    tags = tags.split(/\s*,\s*/) if tags.is_a?(String)
    destination = options['local'] ? '_site' : File.expand_path(File.join(File.dirname(__FILE__), '..'))
    FileUtils.mkdir_p(destination) if options['local']
	input_files = options['xml_only'] ? ['tag/tag.xml'] : (options['html_only'] ? ['tag/tag.html'] : 
		['tag/tag.html', 'tag/tag.xml'])

    tags.each do |tag|
      input_files.each do |input_file|
        result = create_page_string(input_file, :tag=>tag)
        destination_basename = input_file.gsub("/tag", "/#{tag}")
        destination_file = File.join(destination, destination_basename)
        FileUtils.mkdir_p File.dirname(destination_file)
        File.open(destination_file, 'w') {|f| f.write(result) }
      end
    end
  end

  desc "tag_stats", "Print tag stats"
  def tag_stats
    tag_count.each do |tag,count|
      puts "#{tag}: #{count}"
    end
  end
  
  desc "new_post", "quick start jekyll blog post"
  method_options :create_only=>:optional
  def new_post(*args)
    basename = Date.today.to_s + "-#{args.join('-')}.textile"
    new_file = File.join(posts_dir, basename)
	if options['create_only']
	  new_file_string = ''
    else
      title = args.map {|e| e.capitalize}.join(' ')
	  new_file_string = "---\nlayout: post\ntitle: #{title}\n---"
    end
    File.open(new_file, 'w') {|f| f.write(new_file_string)}
    unless options['create_only']
		system(ENV['EDITOR'], new_file)
	end
  end

  def create_page_string(file, variables)
    variables.each {|k,v| instance_variable_set("@#{k}", v) }
    translated_string = ::ERB.new(File.read(file)).result(binding)
  end

  def all_tags
    tag_count.keys
  end

  def root_dir
	File.expand_path(File.join(File.dirname(__FILE__), '..'))
  end

  def posts_dir
 	File.join(root_dir, '_posts')
  end

  #Returns all posts under _posts
  def posts
    Dir["#{posts_dir}/**"].select {|e| e !~ /~$/ }
  end

  #array of posts with their tags
  def post_tags
    posts.map do |e|
      yaml = YAML::load_file(e)
      [e, yaml['tags']]
    end
  end

  #array of tags with their counts
  def tag_count
    count = {}
    post_tags.each do |post, tags|
      tags.each do |t|
        count[t] ||= 0
        count[t] += 1
      end
    end
    count
  end

  # Use this method to print the output of any methods returning data structures
  def print_method(method)
    p send(method)
  end
end
